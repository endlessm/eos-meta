#!/bin/bash -e

# OSTree dev repo URL settings.
OSTREE_USER=endless
OSTREE_HOST=origin.ostree.endlessm.com
OSTREE_DEV_ROOT=staging/dev

function usage {
    cat <<EOF
Invalid option: $1

Valid options:
    -m, --metrics     Configure Metrics System for Dev.
    -a, --apps        Configure Flatpak for Staging.
    -o, --ostree      Configure OSTree for Staging (checked daily).
    -j, --journal     Configure systemd journal to be persistent.
EOF
}

METRICS=true
APPS=true
OSTREE=true
JOURNAL=false
if [ $# -gt 0 ]; then
    METRICS=false
    APPS=false
    OSTREE=false
    while [ $# -gt 0 ]; do
        case "$1" in
            -m|--metrics)
                METRICS=true
                shift
                ;;
            -a|--apps)
                APPS=true
                shift
                ;;
            -o|--ostree)
                OSTREE=true
                shift
                ;;
            -j|--journal)
                JOURNAL=true
                shift
                ;;
            *)
                usage $1
                exit 1
                ;;
        esac
    done
fi

# Check that script was run with superuser priviliges.
if [[ $EUID != 0 ]]; then
    echo "$0 requires superuser privileges."
    exit 1
fi

# Check if master image.
if ostree admin status | grep -q "master"; then
    read -p "Detected master image. Are you sure you wish to continue? [Y/n] " response
    case $response in
        [yY]* | '') ;;
        *) exit 1 ;;
    esac
fi

# Configure persistent systemd journal
if $JOURNAL; then
    echo "Configuring systemd journal to be persistent."
    mkdir /var/log/journal
fi

# Enable systemd coredumps storage
echo "Enabling systemd coredumps processing and storage"
echo "kernel.core_pattern=|/lib/systemd/systemd-coredump %p %u %g %s %t %c %e" > /etc/sysctl.d/50-coredump.conf

# Set metrics env to dev.
if $METRICS; then
    echo "Configuring Metrics System for Dev."
    eos-select-metrics-env dev
fi

# Change OSTree and Flatpak servers to staging.
if $OSTREE || $APPS; then
    # Get the HTTP password for the dev repos.
    read -p "OSTree password: " OSTREE_PASSWORD
    if [ -z "$OSTREE_PASSWORD" ]; then
        echo "error: No password supplied" >&2
        exit 1
    fi

    # Change the Flatpak runtime and apps server URLs.
    if $APPS; then
        if [ -d /var/endless-extra/flatpak/repo ]; then
            flatpak_repo=/var/endless-extra/flatpak/repo
        else
            flatpak_repo=/var/lib/flatpak/repo
        fi

        runtime_url=$(ostree --repo="$flatpak_repo" config get 'remote "eos-runtimes".url')
        runtime_repo=${runtime_url##*/}
        new_runtime_url="https://${OSTREE_USER}:${OSTREE_PASSWORD}@${OSTREE_HOST}/${OSTREE_DEV_ROOT}/${runtime_repo}"

        echo "Setting flatpak runtimes URL to $new_runtime_url"
        flatpak remote-modify eos-runtimes --url="$new_runtime_url"

        apps_url=$(ostree --repo="$flatpak_repo" config get 'remote "eos-apps".url')
        apps_repo=${apps_url##*/}
        new_apps_url="https://${OSTREE_USER}:${OSTREE_PASSWORD}@${OSTREE_HOST}/${OSTREE_DEV_ROOT}/${apps_repo}"

        echo "Setting flatpak apps URL to $new_apps_url"
        flatpak remote-modify eos-apps --url="$new_apps_url"
    fi

    # Change OSTree server and check it.
    if $OSTREE; then
        # Get the current refspec.
        refspec=$(ostree admin status | awk '/refspec:/{print $3}' | head -n1)
        branch=${refspec#*:}

        # Get the OS major.minor version,
        version=$(. /etc/os-release && echo $VERSION | cut -d. -f1-2)

        # Construct the new branch. The major version is the last
        # component of the branch. Replace it with the full version.
        new_branch="${branch%/*}/eos${version}"

        # Get the current URL and convert to staging.
        url=$(ostree config get 'remote "eos".url')
        repo=${url##*/}
        new_url="https://${OSTREE_USER}:${OSTREE_PASSWORD}@${OSTREE_HOST}/${OSTREE_DEV_ROOT}/${repo}"

        # Make sure the autoupdater doesn't start the updater after it's
        # killed below.
        echo "Stopping running eos-autoupdater."
        systemctl stop eos-autoupdater.timer
        systemctl stop eos-autoupdater.service

        echo "Killing eos-updater."
        killall eos-updater &>/dev/null

        echo "Configuring OSTree for Staging."
        # HACK! HACK! HACK! ostree admin set-origin is horribly broken
        # as of ostree 2015.7. It won't change the url or use any --set
        # options for an existing remote. Instead, use the config
        # builtin to handle that. The correct set-origin command is left
        # in place in case this is ever fixed. Upstream bug at
        # https://bugzilla.gnome.org/show_bug.cgi?id=753373
        ostree config set 'remote "eos".url' "$new_url"
        ostree config set 'remote "eos".branches' "${new_branch};"
        ostree admin set-origin eos "$new_url" "$new_branch" \
            --set=branches="${new_branch};"

        # Check for an update every time the updater runs
        # rather than once every two weeks
	sed -i 's/IntervalDays=14/IntervalDays=0/' /etc/eos-updater.conf
    fi
fi

echo "All done!"
