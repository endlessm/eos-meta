#!/usr/bin/env gjs

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const Lang = imports.lang;
const System = imports.system;

function collectGraphicsRenderer() {
    let iface =
        '<node>' +
        '<interface name="org.gnome.SessionManager">' +
        '<property name="Renderer" type="s" access="read"/>' +
        '</interface>' +
        '</node>';

    let sessionProxyProto = Gio.DBusProxy.makeProxyWrapper(iface);
    let sessionProxy = new sessionProxyProto(Gio.DBus.session,
                                             'org.gnome.SessionManager',
                                             '/org/gnome/SessionManager');

    let output = 'Renderer: ';
    if (sessionProxy)
        output += sessionProxy.Renderer;
    else
        output += 'unknown';
    output += '\n';

    return output;
}

function collectBoardInfo() {
    let dmi_info = [ 'sys_vendor', 'product_name', 'product_serial',
                     'product_uuid', 'product_version', 'board_asset_tag',
                     'board_name', 'board_serial', 'board_vendor',
                     'board_version', 'bios_date', 'bios_vendor',
                     'bios_version', 'chassis_asset_tag', 'chassis_serial',
                     'chassis_type', 'chassis_vendor', 'chassis_version' ];
    let output = '';
    dmi_info.forEach(function(name) {
        let file = '/sys/devices/virtual/dmi/id/' + name;

        try {
            let [res, contents] = GLib.file_get_contents(file);
            output += name + ': ' + contents;
        } catch (e) {
        }
    });

    try {
        let [res, contents] = GLib.file_get_contents('/proc/device-tree/compatible');
        output += 'compatible: ' + contents;
    } catch (e) { }

    return output;
}

function collectMmcDevice(dir, level) {
    let fileEnum;
    let output = '';
    let attrs = ['cid', 'manfid', 'oemid', 'name', 'prv', 'serial', 'date',
                 'hwrev', 'fwrev', 'csd', 'scr', 'class', 'vendor', 'device'];
    let prefix = ' '.repeat(level);
    let path = dir.get_path();

    let subsys = dir.resolve_relative_path('subsystem');
    if (!subsys.query_exists(null))
        return '';

    output += prefix + dir.get_basename() + '\n';

    let contents = tryReadFile(path + '/device/firmware_node/path');
    if (contents)
        output += prefix + ' firmware_path: ' + contents;

    contents = tryReadFile(path + '/firmware_node/path');
    if (contents)
        output += prefix + ' firmware_path: ' + contents;

    try {
        let driver = GLib.file_read_link(path + '/device/driver');
        output += prefix + ' driver: ' + GLib.path_get_basename(driver) + '\n';
    } catch (e) { }

    try {
        let driver = GLib.file_read_link(path + '/driver');
        output += prefix + ' driver: ' + GLib.path_get_basename(driver) + '\n';
    } catch (e) { }

    for (var i = 0; i < attrs.length; i++) {
        let attrPath = dir.resolve_relative_path(attrs[i]).get_path();
        let contents = tryReadFile(attrPath);
        if (!contents)
            continue;
        contents = contents.trim();
        output += prefix + ' ' + attrs[i] + ': ' + contents + '\n';
    }

    output += '\n';

    try {
        fileEnum = dir.enumerate_children('standard::name,standard::type,standard::is-symlink',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let fileType = info.get_file_type('standard::type');
        if (info.get_is_symlink() || fileType != Gio.FileType.DIRECTORY)
            continue;
        output += collectMmcDevice(fileEnum.get_child(info), level + 1);
    }

    return output;
}

function collectMmcDevices() {
    let dir = Gio.File.new_for_path('/sys/class/mmc_host');
    let fileEnum;
    let output = '';

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    // Recurse through MMC device info

    let info;
    while ((info = fileEnum.next_file(null))) {
        output += collectMmcDevice(fileEnum.get_child(info), 0);
    }

    return output;
}

function collectI2cDevices() {
    let dir = Gio.File.new_for_path('/sys/bus/i2c/devices');
    let fileEnum;
    let output = '';

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    // This directory mixes i2c hosts and devices. Rather than try to
    // parse them into a tree, we just have our loop iterations able to
    // print useful info about both entry types.

    let info;
    while ((info = fileEnum.next_file(null))) {
        let devDir = fileEnum.get_child(info).get_path();
        output += info.get_name() + '\n';

        output += '  name: ' + tryReadFile(devDir + '/name');

        let contents = tryReadFile(devDir + '/firmware_node/path');
        if (contents)
            output += '  firmware_path: ' + contents;

        try {
            let driver = GLib.file_read_link(devDir + '/device/driver');
            output += '  driver: ' + GLib.path_get_basename(driver) + '\n';
        } catch (e) { }

        try {
            let driver = GLib.file_read_link(devDir + '/driver');
            output += '  driver: ' + GLib.path_get_basename(driver) + '\n';
        } catch (e) { }

        output += '\n';
    }

    return output;
}

function collectRfkill() {
    let dir = Gio.File.new_for_path('/sys/class/rfkill');
    let fileEnum;
    let output = '';

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let devDir = fileEnum.get_child(info).get_path();
        output += info.get_name() + '\n';
        output += '  name: ' + tryReadFile(devDir + '/name');
        output += '  type: ' + tryReadFile(devDir + '/type');
        output += '  hard: ' + tryReadFile(devDir + '/hard');
        output += '  soft: ' + tryReadFile(devDir + '/soft');
        output += '  persistent: ' + tryReadFile(devDir + '/persistent');
        output += '  state: ' + tryReadFile(devDir + '/state');
        try {
            let driver = GLib.file_read_link(devDir + '/device/device/driver');
            output += '  driver: ' + GLib.path_get_basename(driver) + '\n';
        } catch (e) { }

        output += '\n';
    }

    return output;
}

function collectHdaProcCodecInfo(dir) {
    let output = '';
    let fileEnum;

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let name = info.get_name();
        if (!name.startsWith('codec#'))
            continue;

        output += dir.get_basename() + ' ' + name + ':\n';
        output += tryReadFile(fileEnum.get_child(info).get_path());
        output += '\n';
    }

    return output;
}

function collectHdaProcInfo() {
    let dir = Gio.File.new_for_path('/proc/asound');
    let fileEnum;
    let output = '';

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let name = info.get_name();
        if (name == 'cards' || !name.startsWith('card'))
            continue;

        output += collectHdaProcCodecInfo(fileEnum.get_child(info));
    }

    return output;
}

function collectHdaSysInfo() {
    let dir = Gio.File.new_for_path('/sys/class/sound');
    let fileEnum;
    let output = '';

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return '';
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let dev = info.get_name();
        let devDir = fileEnum.get_child(info).get_path();

        let initPins = tryReadFile(devDir + '/init_pin_configs');
        let driverPins = tryReadFile(devDir + '/driver_pin_configs');
        if (!initPins)
            continue;

        output += dev + ':\n';
        output += 'vendor: ' + tryReadFile(devDir + '/vendor_id')
        output += 'subsystem: ' + tryReadFile(devDir + '/subsystem_id')
        output += 'init_pin_configs:\n' + initPins.trim() + '\n';
        if (driverPins)
            output += 'driver_pin_configs:\n' + driverPins.trim() + '\n';

        output += '\n';
    }

    return output;
}

function collectPrintersInfo() {
    let output = '';
    let ppds_dir_path = '/etc/cups/ppd';

    output += 'CUPS status:\n------------\n';
    try {
        let argv = ['/usr/bin/lpstat', '-t'];
        let envp = ['LANG=C'];
        let [res, stdout, stderr, exitStatus] = GLib.spawn_sync(null, argv, envp,
                                                                GLib.SpawnFlags.DEFAULT,
                                                                null, null);
        output += stdout;
    } catch (e) {
        output += 'error ocurred querying CUPS status: ' + e + '\n';
    }

    let ppds_dir = Gio.file_new_for_path(ppds_dir_path);
    if (!ppds_dir.query_exists(null)) {
        output += ppds_dir_path + ' not found';
        return output;
    }

    try {
        let installed_ppds = ppds_dir.enumerate_children('standard::name',
                                                         Gio.FileQueryInfoFlags.NONE,
                                                         null)
        let ppd_info = null;
        while ((ppd_info = installed_ppds.next_file(null))) {
            let ppd_path = GLib.build_filenamev([ppds_dir_path, ppd_info.get_name()]);
            output += '\nContents for ' + ppd_path + ':\n-------------';
            for (let i = 0; i < ppd_path.length; i++)
                output += '-';
            output += '-\n';

            try {
                let [res, contents] = GLib.file_get_contents(ppd_path);
                output += contents;
            } catch (e) {
                output += 'not available\n';
            }
        }
    } catch (e) {
        output += 'Unable to find installed PPD files: ' + e + '\n';
    }

    return output;
}

function collectTemperatureInfo() {
    try {
        let [res, tempInput] = GLib.file_get_contents('/sys/class/thermal/thermal_zone0/temp');
        let temperature = parseInt(tempInput);
        let temperatureStr = (temperature / 1000).toString() + '°C';
        return ((temperature > 0) ? ('+') : ('-')) + temperatureStr + '\n';
    } catch (e) {
        return 'No temperature information available\n';
    }
}

function collectChromiumPluginsInfo() {
    let oldVersion = null;
    try {
        let [res, version] = GLib.file_get_contents('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/VERSION.txt');
        oldVersion = version + ' (via old updater)\n';
    } catch(e) {
        oldVersion = null;
    }

    let flashOutput = 'Flash Version: ';
    let flashPath = Gio.file_new_for_path('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/libpepflashplayer.so');
    if (flashPath.query_exists(null)) {
        try {
            let [res, version] = GLib.file_get_contents('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/Flash_VERSION.txt');
            flashOutput += version + '\n';
        } catch(e) {
            flashOutput += (oldVersion != null) ? oldVersion : 'not available\n';
        }
    } else {
        flashOutput += 'not installed\n';
    }

    let widevineOutput = 'Widevine Version: ';
    let widevinePath = Gio.file_new_for_path('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/libwidevinecdm.so');
    if (widevinePath.query_exists(null)) {
        try {
            let [res, version] = GLib.file_get_contents('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/Widevine_VERSION.txt');
            widevineOutput += version + '\n';
        } catch(e) {
            widevineOutput += (oldVersion != null) ? oldVersion : 'not available\n';
        }
    } else {
        widevineOutput += 'not installed\n';
    }

    return flashOutput + widevineOutput;
}

function collectEosDevInfo() {
    let output = '';
    let signalDir = Gio.File.new_for_path('/var/lib/xml-core');
    if (signalDir.query_exists(null)) {
        output += '*************************************************************\n';
        output += '*                        WARNING                            *\n';
        output += '* eos-dev-fix or eos-convert-system was run on the system!! *\n';
        output += '*************************************************************\n';
        output += '\n';
    }

    return output;
}

function isCoredumpdEnabled() {
    let pattern = tryReadFile('/proc/sys/kernel/core_pattern', '');
    return (pattern.indexOf('systemd-coredump') >= 0);
}

function trySpawn(command) {
    try {
        let [res, stdout, stderr, exitStatus] = GLib.spawn_command_line_sync(command);
        return stdout.toString();
    } catch (e) {
        return '';
    }
}

function tryReadFile(filename, fallbackMessage) {
    try {
        let [res, contents] = GLib.file_get_contents(filename);
        return contents.toString();
    } catch (e) {
        return (fallbackMessage) ? fallbackMessage : '';
    }
}

let diagnostics = [
    {
        title: 'EndlessOS version',
        hardwareInfo: true,
        content: function() { return tryReadFile('/etc/os-release'); },
    },
    {
        title: 'Kernel',
        hardwareInfo: true,
        content: function() {
            return trySpawn('uname -a') + '\n' +
                   'cmdline: ' + tryReadFile('/proc/cmdline') + '\n' +
                   trySpawn('lsmod');
        },
    },
    {
        title: 'EndlessOS image',
        content: function() {
            return trySpawn('attr -q -g eos-image-version /sysroot') +
                   trySpawn('attr -q -g eos-image-version /');
        },
    },
    {
        title: 'Uptime',
        content: function() { return trySpawn('uptime'); },
    },
    {
        title: 'OSTree status',
        content: function() { return trySpawn('ostree admin status'); },
    },
    {
        title: 'Product identification',
        hardwareInfo: true,
        content: function() { return collectBoardInfo(); },
    },
    {
        title: 'CPU',
        hardwareInfo: true,
        content: function() { return tryReadFile('/proc/cpuinfo'); },
    },
    {
        title: 'Memory',
        hardwareInfo: true,
        content: function() {
            return trySpawn('free -mh') + '\n' +
                   tryReadFile('/proc/meminfo');
        },
    },
    {
        title: 'Disks',
        hardwareInfo: true,
        content: function() { return trySpawn('udisksctl dump'); },
    },
    {
        title: 'Mounts',
        content: function() {
            return trySpawn('mount') + '\n' + trySpawn('df -h');
        },
    },
    {
        title: 'Network interfaces',
        hardwareInfo: true,
        content: function() { return trySpawn('ifconfig -a'); },
    },
    {
        title: 'rfkill devices',
        hardwareInfo: true,
        content: function() { return collectRfkill(); },
    },
    {
        title: 'Graphics',
        content: function() { return collectGraphicsRenderer(); },
    },
    {
        title: 'Display',
        content: function() { return trySpawn('xrandr -q --verbose'); },
    },
    {
        title: 'Pulseaudio',
        hardwareInfo: true,
        content: function() {
            return trySpawn('pactl list cards') + '\n' +
                   trySpawn('pactl list sources') + '\n' +
                   trySpawn('pactl list sinks');
        },
    },
    {
        title: 'Input devices',
        hardwareInfo: true,
        content: function() { return tryReadFile('/proc/bus/input/devices'); },
    },
    {
        title: 'PCI devices',
        hardwareInfo: true,
        content: function() { return trySpawn('lspci -vnn'); },
    },
    {
        title: 'USB devices',
        hardwareInfo: true,
        content: function() {
            return trySpawn('lsusb') + '\n' +
                   tryReadFile('/sys/kernel/debug/usb/devices');
        },
    },
    {
        title: 'MMC devices',
        hardwareInfo: true,
        content: function() { return collectMmcDevices(); },
    },
    {
        title: 'I2C devices',
        hardwareInfo: true,
        content: function() { return collectI2cDevices(); },
    },
    {
        title: 'ALSA devices',
        hardwareInfo: true,
        content: function() { return tryReadFile('/proc/asound/cards'); },
    },
    {
        title: 'Intel HDA',
        hardwareInfo: true,
        content: function() { return collectHdaProcInfo() + collectHdaSysInfo(); },
    },
    {
        title: 'Printers',
        content: function() { return collectPrintersInfo(); },
    },
    {
        title: 'Temperature',
        content: function() { return collectTemperatureInfo(); },
    },
    {
        title: 'Chromium plugins',
        content: function() { return collectChromiumPluginsInfo(); }
    },
    {
        title: 'Codecs',
        content: function() {
            return trySpawn('find /var/lib/codecs') + '\n' +
                   trySpawn('gst-inspect-1.0 libav') +
                   trySpawn('gst-inspect-1.0 -b');
        },
    },
    {
        title: 'Flatpak remotes',
        content: function() {
            return trySpawn('flatpak remote-list --show-details');
        },
    },
    {
        title: 'Flatpak runtimes',
        content: function() {
            return trySpawn('flatpak list --runtime --show-details');
        },
    },
    {
        title: 'Flatpak applications',
        content: function() {
            return trySpawn('flatpak list --app --show-details');
        },
    },
    {
        title: 'Processes',
        content: function() { return trySpawn('ps aux'); },
    },
    {
        title: 'Boot timing',
        content: function() { return trySpawn('systemd-analyze'); },
    },
    {
        title: 'Journal',
        hardwareInfo: true,
        coredumpInfo: true,
        content: function(verboseFlag) {
            if (verboseFlag)
                return trySpawn('journalctl --no-pager --output verbose');
            else
                return trySpawn('journalctl --no-pager');
        },
    },
    {
        title: 'Coredump',
        coredumpInfo: true,
        content: function() {
            if (isCoredumpdEnabled())
                return trySpawn('coredumpctl list');
            else
                return 'systemd-coredump not enabled';
        },
    },
];

function dumpDiagnostics(filename, verboseFlag) {
    let fullDump = '';

    fullDump += collectEosDevInfo();

    diagnostics.forEach(function(diag) {
        let content = diag.content(verboseFlag);
        if (!content)
            return;

        fullDump += '='.repeat(diag.title.length + 4) + '\n';
        fullDump += '= ' + diag.title + ' =\n';
        fullDump += '='.repeat(diag.title.length + 4) + '\n';
        fullDump += content.trim() + '\n\n';
    });

    if (filename == 'stdout') {
        print(fullDump);
    } else {
        try {
            GLib.file_set_contents(filename, fullDump);
            print('Endless OS Diagnostics file saved as:')
            print(filename);
            print('Please send that file (not this message!) to the Endless Community or Support.');

            // pop up a new Nautilus window, with the file pre-selected
            try {
                GLib.spawn_command_line_async('nautilus --new-window --select ' + filename);
            } catch (e) {
                // oh well, never mind
            }
        } catch (e) {
            log('Can\'t save diagnostic file to ' + filename + ': ' + e.message);
        }
    }
}

function copyAcpiFirmware(outputPath)
{
    let dir = Gio.File.new_for_path('/sys/firmware/acpi/tables');
    let output = Gio.File.new_for_path(outputPath);
    let fileEnum;

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return;
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let name = info.get_name();
        if (!name.startsWith('DSDT') && !name.startsWith('SSDT'))
            continue;

        let target = output.resolve_relative_path('acpi_' + name.toLowerCase());
        fileEnum.get_child(info).copy(target, 0, null, null);
    }
}

function copyCoredumps(outputPath)
{
    let dir = Gio.File.new_for_path('/var/lib/systemd/coredump');
    let output = Gio.File.new_for_path(outputPath);
    let fileEnum;

    try {
        fileEnum = dir.enumerate_children('standard::name',
                                          Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        return;
    }

    let info;
    while ((info = fileEnum.next_file(null))) {
        let name = info.get_name();

        let target = output.resolve_relative_path('coredump_' + name.toLowerCase());
        fileEnum.get_child(info).copy(target, 0, null, null);
    }
}

function dumpToArchive(filename, contentsFunc) {
    let dir = '/tmp/' + filename;
    GLib.mkdir_with_parents(dir, parseInt('0700', 8));

    contentsFunc(dir);

    filename += '.tar.xz';
    let command = 'tar -C ' + dir + ' -cJf ' + filename + ' . ';
    let [res, stdout, stderr, exitStatus] = GLib.spawn_command_line_sync(command);
    GLib.spawn_command_line_sync('rm -rf ' + dir);
    if (exitStatus != 0) {
        print('ERROR: Failed to create archive');
        return false;
    }

    print('Wrote ' + filename);
    return true;
}

function dumpHardwareInfo(filename, verboseFlag) {
    return dumpToArchive(filename, function(dir) {
        copyAcpiFirmware(dir);

        diagnostics.forEach(function(diag) {
            if (!diag.hardwareInfo)
                return;

            let name = diag.title.toLowerCase().replace(' ', '_') + '.txt';

            let content = diag.content(verboseFlag);
            if (!content)
                return;

            content = content.trim() + '\n';
            GLib.file_set_contents(dir + '/' + name, content);
        });
    });
}

function dumpCoredumps(filename, verboseFlag) {
    if (!isCoredumpdEnabled())
        print('WARNING: It looks like systemd-coredump is not enabled. Output will not contain any coredumps.');

    return dumpToArchive(filename, function(dir) {
        copyCoredumps(dir);

        diagnostics.forEach(function(diag) {
            if (!diag.coredumpInfo)
                return;

            let name = diag.title.toLowerCase().replace(' ', '_') + '.txt';

            let content = diag.content(verboseFlag);
            if (!content)
                return;

            content = content.trim() + '\n';
            GLib.file_set_contents(dir + '/' + name, content);
        });
    });
}

function buildFilename(prefix, extension) {
    let date = GLib.DateTime.new_now_local();
    return prefix + '-' + date.format('%y%m%d_%H%M%S_UTC%z') + extension;
}

/* Parse command line arguments. */
let filename = null;
let hardwareFlag = false;
let coredumpsFlag = false;
let verboseFlag = false;

ARGV.forEach(function(arg) {
    if (arg == '-H' || arg == '--hardware')
        hardwareFlag = true;
    else if (arg == '-C' || arg == '--coredumps')
        coredumpsFlag = true;
    else if (arg == '-v' || arg == '--verbose')
        verboseFlag = true;
    else
        filename = arg;
});

if (hardwareFlag && coredumpsFlag && filename) {
    print('ERROR: If both --hardware and --coredumps are set, filename cannot be provided.');
    System.exit(1);
}

/* Got the right privileges? */
if (hardwareFlag || coredumpsFlag) {
    let credentials = new Gio.Credentials();
    if (credentials.get_unix_user() != 0) {
        print('ERROR: For hardware info or coredumps, run eos-diagnostics as root.');
        System.exit(1);
    }
}

/* Output hardware info? */
if (hardwareFlag) {
    if (!dumpHardwareInfo((!filename) ? buildFilename('eos-hwinfo', '') : filename, verboseFlag))
        System.exit(1);
}

/* Output coredumps? */
if (coredumpsFlag) {
    // Force verbose output so we get the full journal logs
    if (!dumpCoredumps((!filename) ? buildFilename('eos-coredumps', '') : filename, true))
        System.exit(1);
}

if (!hardwareFlag && !coredumpsFlag) {
    if (!filename) {
        let basename = buildFilename('eos-diagnostic', '.txt');
        filename = GLib.build_filenamev([GLib.get_home_dir(), basename]);
    }

    dumpDiagnostics(filename, verboseFlag);
}
