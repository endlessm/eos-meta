#!/bin/bash -e
set -o pipefail

# Writes a raw installer image (possibly zipped)
# to a device (e.g., USB drive or SD card)
# using dd, with status monitoring via pv
#
# Afterwards, adds an exfat partition that fills
# the rest of the available space to the beginning
# of the partition table and creates the filesystem
# on it. NOTE: the partition table will not be
# in physical order so Windows can mount the image
# partition.

EOS_WRITE_IMAGE=$(dirname "$0")/eos-write-image
if [ ! -f "$EOS_WRITE_IMAGE" ]; then
    EOS_WRITE_IMAGE='eos-write-image'
fi
EOS_DOWNLOAD_IMAGE=$(dirname "$0")/eos-download-image
if [ ! -f "$EOS_DOWNLOAD_IMAGE" ]; then
    EOS_DOWNLOAD_IMAGE='eos-download-image'
fi

ARGS=$(getopt -o i:o:lh -l "installer:,os-image:,latest,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat >&2 <<EOF
Usage:
   $0 --os-image PATH --installer PATH DEVICE
   $0 --latest DEVICE

Arguments:
    DEVICE	Device path (e.g. '/dev/sdb' or '/dev/mmcblk0')

Options:
   -i,--installer PATH	Path to eosinstaller image
   -o,--os-image  PATH	Path to Endless OS image to add to installer
   -l,--latest		Fetch latest OS and/or eosinstaller image

If --latest is not specified, both --installer and --os-image are required.

If --latest is specified and one or both of --installer or --os-image are
missing, the latest image will be downloaded.
EOF
}

function check_exists() {
    if [ ! -f "$1" ]; then
        echo "Error: $1 does not exist or is not a file" >&2
        exit 1
    fi
}
while true; do
    case "$1" in
        -i|--installer)
            shift
            INSTALLER_IMAGE="$1"
            check_exists "$INSTALLER_IMAGE"
            shift
            ;;
        -o|--os-image)
            shift
            OS_IMAGE="$1"
            check_exists "$OS_IMAGE"
            check_exists "$OS_IMAGE.asc"
            shift
            ;;
        -l|--latest)
            shift
            FETCH_LATEST=true
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

if [ $# -lt 1 ]; then
    echo "Error: missing DEVICE" >&2
    echo >&2
    usage
    exit 1
fi

if [ $# -gt 1 ]; then
    echo "Error: extra arguments after DEVICE" >&2
    echo >&2
    usage
    exit 1
fi


DEVICE="$1"

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges" >&2
    exit 1
fi

# Check for required tools
declare -A dependencies
dependencies=(
    [dd]='coreutils'
    [mkfs.exfat]='exfat-utils'
    [pv]='pv'
    [xzcat]='xz-utils'
    [zcat]='gzip'
)
for command in "${!dependencies[@]}"; do
    if ! which "$command" >/dev/null 2>&1; then
        echo "$command is not installed... aborting!" >&2
        echo "Try 'sudo apt-get install ${dependencies[$command]}' on Debian-based OSes or 'rpm-ostree install --apply-live ${dependencies[$command]}' on Fedora Silverblue" >&2
        exit 1
    fi
done

if [ ! -b "$DEVICE" ]; then
    echo "$DEVICE does not exist or is not a block device... aborting!" >&2
    exit 1
fi

if grep -qs "$DEVICE" /proc/mounts; then
    # Protect against overwriting the device currently in use
    echo "$DEVICE is currently in use -- please unmount and try again" >&2
    exit 1
fi

if [ ! -z "$FETCH_LATEST" ]; then
    if [ -z "$INSTALLER_IMAGE" ]; then
        INSTALLER_IMAGE=$($EOS_DOWNLOAD_IMAGE --product eosinstaller)
    fi
    if [ -z "$OS_IMAGE" ]; then
        OS_IMAGE=$($EOS_DOWNLOAD_IMAGE --product eos)
    fi
fi

if [ ! -f "$INSTALLER_IMAGE" ] || [ ! -f "$OS_IMAGE" ]; then
    echo "Error: --installer and --os-image are both required if --latest is not specified" >&2
    echo >&2
    usage
    exit 2
fi

# Write the image
echo >&2
echo "Writing $INSTALLER_IMAGE to $DEVICE..." >&2
$EOS_WRITE_IMAGE --removable -f "$INSTALLER_IMAGE" "$DEVICE"

# Get the current partition table
TABLE=$(sfdisk -d "$DEVICE")

# Split the partition table to header and partitions
HEADER=$(echo "$TABLE" | grep -v '^/')
PARTS=$(echo "$TABLE" | grep '^/' | sed -e 's/.*: //')

# Grab the start and size of the last partition; add them to get the start of
# our exFAT partition.
ROOT_START=$(echo "$PARTS" | sed -n -e '$ s/.*start=[ ]\+\([0-9]\+\).*$/\1/p')
ROOT_SIZE=$(echo "$PARTS" | sed -n -e '$ s/.*size=[ ]\+\([0-9]\+\).*$/\1/p')
START=$(( ROOT_START + ROOT_SIZE ))

# Remove the last-lba line so that we fill the disk
HEADER=$(echo "$HEADER" | sed -e '/^last-lba:/d')

# Prepend our partition
PARTS="start=$START, name=eosimages, type=EBD0A0A2-B9E5-4433-87C0-68B6B72699C7
$PARTS"

# Reconstruct the table
TABLE="$HEADER
$PARTS"

# Replace the partition table with our modified version
echo "$TABLE" | sfdisk --force --no-reread "$DEVICE"

# At this point udev should have seen that sfdisk closed the block device
# which was opened for writing, so it will be reprobing.
# Add udevadm settle here to avoid races.
udevadm settle
partprobe "$DEVICE"

# Grab the eosimages partition and create exfat fs on it
PART=$(sfdisk -d "$DEVICE" | grep 'eosimages' | cut -f1 -d' ')
mkfs.exfat -n eosimages "$PART"

# Give udisks a chance to notice the new partition
partprobe "$DEVICE"
udevadm settle

# Try to mount the exfat partition
udisksctl mount -b "$PART" --no-user-interaction || exit 1
# Grab the mount point
MOUNTPOINT=$(grep "$PART" /proc/mounts | cut -f2 -d' ')
if test -n "$MOUNTPOINT" -a -d "$MOUNTPOINT"
then
  # Write image and its signature
  cp "$OS_IMAGE.asc" "$MOUNTPOINT"/
  pv "$OS_IMAGE" > "$MOUNTPOINT"/"$(basename "$OS_IMAGE")"
fi
udisksctl unmount -b "$PART" --no-user-interaction
sync
